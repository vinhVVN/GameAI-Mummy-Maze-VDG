from collections import deque

class ForwardChecking:
    """
    Thu·∫≠t to√°n Backtracking + Forward Checking cho c·∫£ SimpleMazeProblem v√† MazeProblem.
    """

    def __init__(self, problem, max_depth=2000, min_safe_dist=2, debug=False):
        self.problem = problem
        self.maze = problem.maze
        self.max_depth = max_depth
        self.min_safe_dist = min_safe_dist
        self.best_path = None
        self.found = False
        self.debug = debug
        self.is_simple_problem = not hasattr(problem, 'min_dist')  # Ph√¢n bi·ªát lo·∫°i problem

    def solve(self):
        start = self.problem.get_init_state()
        visited = set([start])
        self.best_path = None
        self.found = False
        self._dfs(start, [], visited, 0)
        return self.best_path

    def _dfs(self, state, path, visited, depth):
        if depth > self.max_depth:
            return

        if self.problem.is_goal_state(state):
            self.best_path = path[:]
            self.found = True
            if self.debug:
                print(f"‚úÖ Found goal! Path = {path}")
            return

        try:
            moves = self.problem.get_move(state)
        except Exception as e:
            if self.debug:
                print(f"‚ö†Ô∏è get_move error: {e}")
            moves = []

        for next_state, action, cost in moves:
            # B·ªè qua n·∫øu ƒë√£ thƒÉm ho·∫∑c cost v√¥ h·∫°n
            if cost == float('inf') or next_state in visited:
                continue

            # Forward Checking - √ÅP D·ª§NG CHO C·∫¢ HAI LO·∫†I PROBLEM
            if not self._forward_check(next_state):
                continue

            visited.add(next_state)
            path.append(action)

            if self.debug:
                print(f"‚Üí Depth {depth}: Move {action} | State = {next_state}")

            self._dfs(next_state, path, visited, depth + 1)
            if self.found:
                return

            path.pop()
            visited.remove(next_state)

    def _forward_check(self, state):
        """Forward checking cho c·∫£ SimpleMazeProblem v√† MazeProblem"""
        
        # L·∫§Y V·ªä TR√ç PLAYER PH√ô H·ª¢P V·ªöI T·ª™NG LO·∫†I PROBLEM
        player_pos = self._get_player_position(state)
        
        if player_pos is None:
            if self.debug:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c ƒë·ªãnh player position t·ª´ state: {state}")
            return False

        # 1Ô∏è‚É£ Trap check (n·∫øu c√≥)
        trap = getattr(self.problem, 'trap_pos', None)
        if trap and player_pos == trap:
            if self.debug:
                print(f"üíÄ Player r∆°i v√†o b·∫´y t·∫°i {trap}")
            return False

        # 2Ô∏è‚É£ Mummy proximity check (ch·ªâ cho MazeProblem)
        if not self.is_simple_problem and hasattr(self.problem, 'min_dist'):
            try:
                # State format: (player_pos, mummies_pos)
                mummies_pos = state[1] if isinstance(state, tuple) and len(state) == 2 else []
                md = self.problem.min_dist(list(mummies_pos), player_pos)
                
                if md <= self.min_safe_dist:
                    if self.debug:
                        print(f"‚ò†Ô∏è Qu√° g·∫ßn mummy (dist={md}) t·∫°i {player_pos}")
                    return False
            except Exception as e:
                if self.debug:
                    print(f"‚ö†Ô∏è L·ªói ki·ªÉm tra mummy: {e}")

        # 3Ô∏è‚É£ Reachability check (BFS) - QUAN TR·ªåNG NH·∫§T
        if not self._is_reachable_to_goal(player_pos):
            if self.debug:
                print(f"üö´ Kh√¥ng th·ªÉ t·ªõi goal t·ª´ {player_pos}")
            return False

        return True

    def _get_player_position(self, state):
        """L·∫•y v·ªã tr√≠ player t·ª´ state, h·ªó tr·ª£ c·∫£ hai ƒë·ªãnh d·∫°ng"""
        try:
            if self.is_simple_problem:
                # SimpleMazeProblem: state l√† (x, y)
                if isinstance(state, tuple) and len(state) == 2:
                    return state
            else:
                # MazeProblem: state l√† (player_pos, mummies_pos)
                if isinstance(state, tuple) and len(state) == 2:
                    player_pos = state[0]
                    if isinstance(player_pos, tuple) and len(player_pos) == 2:
                        return player_pos
            
            # Fallback: th·ª≠ parse b·∫•t k·ª≥ tuple n√†o c√≥ 2 ph·∫ßn t·ª≠
            if isinstance(state, tuple) and len(state) == 2:
                if all(isinstance(x, int) for x in state):
                    return state
            
            return None
            
        except Exception:
            return None

    def _is_reachable_to_goal(self, player_pos):
        """BFS ki·ªÉm tra reachability - FIXED VERSION"""
        if not (isinstance(player_pos, tuple) and len(player_pos) == 2):
            return False

        # L·∫•y goal position
        goal = getattr(self.problem, 'goal_pos', None) or getattr(self.problem, 'goal', None)
        if goal is None:
            # N·∫øu kh√¥ng c√≥ goal, coi nh∆∞ reachable
            return True
            
        if player_pos == goal:
            return True

        maze = self.maze
        try:
            width, height = maze.maze_size
        except Exception:
            # Fallback n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c maze size
            width, height = 100, 100  # Gi√° tr·ªã ƒë·ªß l·ªõn

        visited = set()
        q = deque([player_pos])
        visited.add(player_pos)
        
        # H∆∞·ªõng di chuy·ªÉn (2 √¥ v√¨ ƒëi qua walls)
        dirs = [(0, -2), (0, 2), (-2, 0), (2, 0)]

        while q:
            cx, cy = q.popleft()
            
            for dx, dy in dirs:
                # V·ªã tr√≠ t∆∞·ªùng c·∫ßn ki·ªÉm tra
                wall_x = cx + dx // 2
                wall_y = cy + dy // 2
                
                # V·ªã tr√≠ ti·∫øp theo
                nx, ny = cx + dx, cy + dy

                # Ki·ªÉm tra gi·ªõi h·∫°n b·∫£n ƒë·ªì
                if not (0 <= nx < width and 0 <= ny < height):
                    continue

                # Ki·ªÉm tra t∆∞·ªùng
                try:
                    if not maze.is_passable(wall_x, wall_y):
                        continue
                except Exception:
                    continue

                npos = (nx, ny)
                if npos in visited:
                    continue
                    
                if npos == goal:
                    return True
                    
                visited.add(npos)
                q.append(npos)

        return False